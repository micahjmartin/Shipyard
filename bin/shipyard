#!/usr/bin/env python3

import os
import sys
import fire

from shipyard.patches import Patches
from shipyard.patch import PatchFile
from shipyard.generator import new_project

class cli:
    def __init__(self, directory=".", source_directory="sources"):
        """Maintain a group of patches against a source repository"""
        self.dir = directory
        self.sdir = source_directory
    
    def _load(self) -> Patches:
        path = os.path.join(self.dir, "shipfile.py")
        if os.path.exists(path):
            # Detected a shipyard file in the current dir, assume this is the patch folder
            p = Patches(self.dir, source_directory=self.sdir)
            return p
            #except Exception as e:
                #print(f"[!] Detected a shipyard.py file. But there were errors loading it: {e}", file=sys.stderr)
                #exit(127)
        print("[!] This directory does not appear to be a Shipyard directory. Try passing a directory with '--directory' or setting it up in the current directory", file=sys.stderr)
        print(f"{sys.argv[0]} init <url>", file=sys.stderr)
        exit(127)

    def init(self, url, name=""):
        """Initialize a new Shipyard project directory for the given url

        url: URL to a git repository with the source code
        name: override the name of the project (default repository name)
        """
        try:
            new_project(self.dir, url, name)
            self._load()
        except Exception as e:
            print(e, file=sys.stderr)
            exit(127)

    def versions(self):
        """List the versions of the source code. Denoting which versions have patches"""
        p = self._load()
        print(f"versions of {p.infoObject.Name}")
        for v in p.source.versions():
            # Print tag aswell as version
            t = p.infoObject.version_to_tag(v)
            if t != v:
                v = f"{v} - tags/{t}"
            if v in p.versions:
                print(f"{v} - {len(p.versions[v])} patches")
            else:
                print(v)

    def import_patch(self, name, description=""):
        """import a new patchfile
        
        This patch can later be applied to multiple versions of the source
        
        Example: git diff file.c | shipyard import mypatch "this is an awesome patchfile" """
        buf = sys.stdin.read()
        buf = buf.strip()
        if not buf:
            print("[*] Empty contents. Exiting")
            return
        

        # Import it into scratch by default
        _, ext = os.path.splitext(name)
        if not ext:
            name += ".patch"
        pth = os.path.join(self.dir, "scratch")
        os.makedirs(pth, exist_ok=True)
        pth = os.path.join(pth, name)
        p = PatchFile(filename=pth, contents=buf)
        if description:
            p.Description = description
        with open(pth, "w") as of:
            of.write(p.dump())
        print("[+] Saved new patch file to", pth)
    
    def test_patch(self, patchfile):
        """Test a patch file against all versions"""
        p = self._load()
        patch = patchfile
        if not patchfile in p.code_patches:
            try:
                patch = PatchFile.from_file(patchfile)
            except Exception as e:
                print("[!] Could not load patchfile or CodePatch:", e, file=sys.stderr)
                exit(127)
        try:
            p.test_patch(patch)
        except Exception as e:
            print("[!] Checkout branch:", e, file=sys.stderr)
            exit(127)
    
    def build_version(self, version):
        """Build a patch for a new version. This will use all existing patch files to try and create a version"""
        p = self._load()
        p.patch_version(version)

    def export(self, version):
        """Export the version into a single patchfile"""
        p = self._load()
        vers = p.source.versions()
        if len(vers) > 1:
            p.source.checkout(version)
        else:
            version = vers[0]
        res = f"{p.infoObject.Name} {version}\n"
        p.source.reset()
        for patch in p.versions.get(version, []):
            p.source.apply(patch)

        # Apply all the code patches
        p.get_file_list()
        try:
            p.apply_code_patches()
        except Exception as e:
            print("[!]", e)
            quit(1)
        
        res += p.source.refresh()
        print(res)
    
    def list_source_files(self):
        """List all files of the source that are not in the gitignore"""
        p = self._load()
        p.get_file_list()
        for f in p._files:
            print(f)
    
    def apply_code_patches(self, patches=[]):
        """Apply all the code patches to the current source"""
        p = self._load()
        p.get_file_list()
        try:
            for cf in p.apply_code_patches():
                print(f"[+] applied {cf.__name__}")
        except Exception as e:
            print("[!]", e)

    def checkout(self, version=""):
        """Checkout the given version of the source. If not version is given it will reset the
        source back to the original state of the current version"""
        p = self._load()
        p.source.reset()
        if version:
            p.source.checkout(version)

def main():
    #p = Patch.from_file(sys.argv[1])
    #print(p.dump())
    fire.Fire(cli)

main()